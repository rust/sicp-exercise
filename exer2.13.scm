(define (make-interval a b) (cons a b))
(define (upper-bound a)
  (car a))
(define (lower-bound a)
  (cdr a))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
(define (div-interval x y)
  (mul-interval x
                (make-interval (/ 1.0 (upper-bound y))
                               (/ 1.0 (lower-bound y)))))

(define (make-center-percent c p)
  (let ((w (/ (* c p) 100)))
    (make-interval (- c w) (+ c w))))
(define (percent int)
  (let ((c (/ (+ (upper-bound int) (lower-bound int)) 2.0)))
    (* (/ (abs (- (upper-bound int) c)) c) 100.0)))
(define (center int)
  (/ (+ (upper-bound int) (lower-bound int)) 2.0))

(define (percent-mul-interval x y)
  (let ((c1 (center x))
        (c2 (center y))
        (p1 (percent x))
        (p2 (percent y)))
    (let ((pp12 (+ p1 p2))
          (cc12 (* c1 c2)))
      (make-interval (* cc12 (- 100 pp12))
                     (* cc12 (+ 100 pp12))))))

(define int1 (make-center-percent 100 0.001))
(define int2 (make-center-percent 150 0.003))
(percent int1)
(percent int2)

(percent-mul-interval int1 int2) ;; => (1499940.0 . 1500060.0)