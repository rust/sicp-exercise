(define (enumerate-interval low high)
    (if (> low high) '() (cons low (enumerate-interval (+ low 1) high))))

(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
        (list empty-board)
        (filter
         (lambda (positions) (safe? k positions))
         (flatmap
          (lambda (rest-of-queens)
            (map (lambda (new-row)
                   (adjoin-position new-row k rest-of-queens))
                 (enumerate-interval 1 board-size)))
          (queen-cols (- k 1))))))
  (queen-cols board-size))

(define empty-board ())

(define (adjoin-position new-row k rest-of-queens)
  (cons (list k new-row) rest-of-queens))

(define (safe? k positions)
  (define (safe-position? c-col c-row posision)
    (let ((col (car posision))
          (row (cadr posision)))
      (let ((lu (- row col))
            (ll (+ row col)))
        (and (not (eq? lu (- c-row c-col)))
             (not (eq? ll (+ c-row c-col)))
             (not (eq? row c-row))))))
  (define (all p ls)
    (if (null? ls)
        #t
        (and (p (car ls)) (all p (cdr ls)))))
  (let ((hd (car positions))
        (tl (cdr positions)))
    (all (lambda (pos) (safe-position? k (cadr hd) pos)) tl)))

(print (queens 8))
;; => (((8 4) (7 2) (6 7) (5 3) (4 6) (3 8) (2 5) (1 1))
;; ((8 5) (7 2) (6 4) (5 7) (4 3) (3 8) (2 6) (1 1))
;; ((8 3) (7 5) (6 2) (5 8) (4 6) (3 4) (2 7) (1 1))
;; ((8 3) (7 6) (6 4) (5 2) (4 8) (3 5) (2 7) (1 1))
;; ((8 5) (7 7) (6 1) (5 3) (4 8) (3 6) (2 4) (1 2))
;; ((8 4) (7 6) (6 8) (5 3) (4 1) (3 7) (2 5) (1 2))
;; ((8 3) (7 6) (6 8) (5 1) (4 4) (3 7) (2 5) (1 2))
;; ((8 5) (7 3) (6 8) (5 4) (4 7) (3 1) (2 6) (1 2))
;; ((8 5) (7 7) (6 4) (5 1) (4 3) (3 8) (2 6) (1 2))
;; ((8 4) (7 1) (6 5) (5 8) (4 6) (3 3) (2 7) (1 2))
;; ((8 3) (7 6) (6 4) (5 1) (4 8) (3 5) (2 7) (1 2))
;; ((8 4) (7 7) (6 5) (5 3) (4 1) (3 6) (2 8) (1 2))
;; ((8 6) (7 4) (6 2) (5 8) (4 5) (3 7) (2 1) (1 3))
;; ((8 6) (7 4) (6 7) (5 1) (4 8) (3 2) (2 5) (1 3))
;; ((8 1) (7 7) (6 4) (5 6) (4 8) (3 2) (2 5) (1 3))
;; ((8 6) (7 8) (6 2) (5 4) (4 1) (3 7) (2 5) (1 3))
;; ((8 6) (7 2) (6 7) (5 1) (4 4) (3 8) (2 5) (1 3))
;; ((8 4) (7 7) (6 1) (5 8) (4 5) (3 2) (2 6) (1 3))
;; ((8 5) (7 8) (6 4) (5 1) (4 7) (3 2) (2 6) (1 3))
;; ((8 4) (7 8) (6 1) (5 5) (4 7) (3 2) (2 6) (1 3))
;; ((8 2) (7 7) (6 5) (5 8) (4 1) (3 4) (2 6) (1 3))
;; ((8 1) (7 7) (6 5) (5 8) (4 2) (3 4) (2 6) (1 3))
;; ((8 2) (7 5) (6 7) (5 4) (4 1) (3 8) (2 6) (1 3))
;; ((8 4) (7 2) (6 7) (5 5) (4 1) (3 8) (2 6) (1 3))
;; ((8 5) (7 7) (6 1) (5 4) (4 2) (3 8) (2 6) (1 3))
;; ((8 6) (7 4) (6 1) (5 5) (4 8) (3 2) (2 7) (1 3))
;; ((8 5) (7 1) (6 4) (5 6) (4 8) (3 2) (2 7) (1 3))
;; ((8 5) (7 2) (6 6) (5 1) (4 7) (3 4) (2 8) (1 3))
;; ((8 6) (7 3) (6 7) (5 2) (4 8) (3 5) (2 1) (1 4))
;; ((8 2) (7 7) (6 3) (5 6) (4 8) (3 5) (2 1) (1 4))
;; ((8 7) (7 3) (6 1) (5 6) (4 8) (3 5) (2 2) (1 4))
;; ((8 5) (7 1) (6 8) (5 6) (4 3) (3 7) (2 2) (1 4))
;; ((8 1) (7 5) (6 8) (5 6) (4 3) (3 7) (2 2) (1 4))
;; ((8 3) (7 6) (6 8) (5 1) (4 5) (3 7) (2 2) (1 4))
;; ((8 6) (7 3) (6 1) (5 7) (4 5) (3 8) (2 2) (1 4))
;; ((8 7) (7 5) (6 3) (5 1) (4 6) (3 8) (2 2) (1 4))
;; ((8 7) (7 3) (6 8) (5 2) (4 5) (3 1) (2 6) (1 4))
;; ((8 5) (7 3) (6 1) (5 7) (4 2) (3 8) (2 6) (1 4))
;; ((8 2) (7 5) (6 7) (5 1) (4 3) (3 8) (2 6) (1 4))
;; ((8 3) (7 6) (6 2) (5 5) (4 8) (3 1) (2 7) (1 4))
;; ((8 6) (7 1) (6 5) (5 2) (4 8) (3 3) (2 7) (1 4))
;; ((8 8) (7 3) (6 1) (5 6) (4 2) (3 5) (2 7) (1 4))
;; ((8 2) (7 8) (6 6) (5 1) (4 3) (3 5) (2 7) (1 4))
;; ((8 5) (7 7) (6 2) (5 6) (4 3) (3 1) (2 8) (1 4))
;; ((8 3) (7 6) (6 2) (5 7) (4 5) (3 1) (2 8) (1 4))
;; ((8 6) (7 2) (6 7) (5 1) (4 3) (3 5) (2 8) (1 4))
;; ((8 3) (7 7) (6 2) (5 8) (4 6) (3 4) (2 1) (1 5))
;; ((8 6) (7 3) (6 7) (5 2) (4 4) (3 8) (2 1) (1 5))
;; ((8 4) (7 2) (6 7) (5 3) (4 6) (3 8) (2 1) (1 5))
;; ((8 7) (7 1) (6 3) (5 8) (4 6) (3 4) (2 2) (1 5))
;; ((8 1) (7 6) (6 8) (5 3) (4 7) (3 4) (2 2) (1 5))
;; ((8 3) (7 8) (6 4) (5 7) (4 1) (3 6) (2 2) (1 5))
;; ((8 6) (7 3) (6 7) (5 4) (4 1) (3 8) (2 2) (1 5))
;; ((8 7) (7 4) (6 2) (5 8) (4 6) (3 1) (2 3) (1 5))
;; ((8 4) (7 6) (6 8) (5 2) (4 7) (3 1) (2 3) (1 5))
;; ((8 2) (7 6) (6 1) (5 7) (4 4) (3 8) (2 3) (1 5))
;; ((8 2) (7 4) (6 6) (5 8) (4 3) (3 1) (2 7) (1 5))
;; ((8 3) (7 6) (6 8) (5 2) (4 4) (3 1) (2 7) (1 5))
;; ((8 6) (7 3) (6 1) (5 8) (4 4) (3 2) (2 7) (1 5))
;; ((8 8) (7 4) (6 1) (5 3) (4 6) (3 2) (2 7) (1 5))
;; ((8 4) (7 8) (6 1) (5 3) (4 6) (3 2) (2 7) (1 5))
;; ((8 2) (7 6) (6 8) (5 3) (4 1) (3 4) (2 7) (1 5))
;; ((8 7) (7 2) (6 6) (5 3) (4 1) (3 4) (2 8) (1 5))
;; ((8 3) (7 6) (6 2) (5 7) (4 1) (3 4) (2 8) (1 5))
;; ((8 4) (7 7) (6 3) (5 8) (4 2) (3 5) (2 1) (1 6))
;; ((8 4) (7 8) (6 5) (5 3) (4 1) (3 7) (2 2) (1 6))
;; ((8 3) (7 5) (6 8) (5 4) (4 1) (3 7) (2 2) (1 6))
;; ((8 4) (7 2) (6 8) (5 5) (4 7) (3 1) (2 3) (1 6))
;; ((8 5) (7 7) (6 2) (5 4) (4 8) (3 1) (2 3) (1 6))
;; ((8 7) (7 4) (6 2) (5 5) (4 8) (3 1) (2 3) (1 6))
;; ((8 8) (7 2) (6 4) (5 1) (4 7) (3 5) (2 3) (1 6))
;; ((8 7) (7 2) (6 4) (5 1) (4 8) (3 5) (2 3) (1 6))
;; ((8 5) (7 1) (6 8) (5 4) (4 2) (3 7) (2 3) (1 6))
;; ((8 4) (7 1) (6 5) (5 8) (4 2) (3 7) (2 3) (1 6))
;; ((8 5) (7 2) (6 8) (5 1) (4 4) (3 7) (2 3) (1 6))
;; ((8 3) (7 7) (6 2) (5 8) (4 5) (3 1) (2 4) (1 6))
;; ((8 3) (7 1) (6 7) (5 5) (4 8) (3 2) (2 4) (1 6))
;; ((8 8) (7 2) (6 5) (5 3) (4 1) (3 7) (2 4) (1 6))
;; ((8 3) (7 5) (6 2) (5 8) (4 1) (3 7) (2 4) (1 6))
;; ((8 3) (7 5) (6 7) (5 1) (4 4) (3 2) (2 8) (1 6))
;; ((8 5) (7 2) (6 4) (5 6) (4 8) (3 3) (2 1) (1 7))
;; ((8 6) (7 3) (6 5) (5 8) (4 1) (3 4) (2 2) (1 7))
;; ((8 5) (7 8) (6 4) (5 1) (4 3) (3 6) (2 2) (1 7))
;; ((8 4) (7 2) (6 5) (5 8) (4 6) (3 1) (2 3) (1 7))
;; ((8 4) (7 6) (6 1) (5 5) (4 2) (3 8) (2 3) (1 7))
;; ((8 6) (7 3) (6 1) (5 8) (4 5) (3 2) (2 4) (1 7))
;; ((8 5) (7 3) (6 1) (5 6) (4 8) (3 2) (2 4) (1 7))
;; ((8 4) (7 2) (6 8) (5 6) (4 1) (3 3) (2 5) (1 7))
;; ((8 6) (7 3) (6 5) (5 7) (4 1) (3 4) (2 2) (1 8))
;; ((8 6) (7 4) (6 7) (5 1) (4 3) (3 5) (2 2) (1 8))
;; ((8 4) (7 7) (6 5) (5 2) (4 6) (3 1) (2 3) (1 8))
;; ((8 5) (7 7) (6 2) (5 6) (4 3) (3 1) (2 4) (1 8)))
