;; ステップ数など表示するように
(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess count)
    (print count " " guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next (+ count 1)))))
  (try first-guess 1))

(fixed-point (lambda (x) (+ 1 (/ 1 x))) 1.0) ;; => 1.6180327868852458

(fixed-point (lambda (x) (/ (log 1000) (log x))) 10.0)
1 10.0
2 2.9999999999999996
3 6.2877098228681545
4 3.7570797902002955
5 5.218748919675316
6 4.1807977460633134
7 4.828902657081293
8 4.386936895811029
9 4.671722808746095
10 4.481109436117821
11 4.605567315585735
12 4.522955348093164
13 4.577201597629606
14 4.541325786357399
15 4.564940905198754
16 4.549347961475409
17 4.5596228442307565
18 4.552843114094703
19 4.55731263660315
20 4.554364381825887
21 4.556308401465587
22 4.555026226620339
23 4.55587174038325
24 4.555314115211184
25 4.555681847896976
26 4.555439330395129
27 4.555599264136406
28 4.555493789937456
29 4.555563347820309
30 4.555517475527901
31 4.555547727376273
32 4.555527776815261
33 4.555540933824255
4.555532257016376 ;; => 34 step

(define (average x y) (/ (+ x y) 2))
(fixed-point (lambda (x) (average x (/ (log 1000) (log x)))) 10.0)
1 10.0
2 6.5
3 5.095215099176933
4 4.668760681281611
5 4.57585730576714
6 4.559030116711325
7 4.55613168520593
8 4.555637206157649
9 4.55555298754564
10 4.555538647701617
4.555536206185039 ;; => 11 step