;; (install-rational-package) を修正する
(define (install-rational-package)
  ;; internal procedure
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (cons n d))
  (define (add-rat x y)
    (make-rat (add (mul (numer x) (denom y))
                   (mul (numer y) (denom x)))
              (mul (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (sub (mul (numer x) (denom y))
                   (mul (numer y) (denom x)))
              (mul (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (mul (numer x) (numer y))
              (mul (denom x) (numer y))))
  (define (div-rat x y)
    (make-rat (mul (numer x) (denom y))
              (mul (denom x) (numer y))))

  ;; interface to rest of the system
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  'done)
(define (make-rational n d)
  ((get 'make 'rational) n d))

(define p1 (make-polyinomial 'x '((2 1) (0 1))))
(define p2 (make-polyinomial 'x '((3 1) (0 1))))
(define rf (make-rational p2 p1))

;; (numer rf) -> p1
;; (denom rf) -> p2
(add rf rf)
(add-rat rf rf)
(make-rat (add (mul (numer rf) (denom rf))
               (mul (numer rf) (denom rf)))
          (mul (denom rf) ((denom rf))))
(make-rat (add (mul p1 p2)
               (mul p1 p2))
          (mul p2 p2))
(make-rat (add (mul-poly p1 p2)
               (mul-poly p1 p2))
          (mul-poly p2 p2))
(make-rat (add (mul-poly p1 p2)
               (mul-poly p1 p2))
          (mul-poly p2 p2))
(make-rat (add (make-poly (variable p1)
                          (mul-terms (term-list p1)
                                     (term-list p2)))
               (make-poly (variable p1)
                          (mul-terms (term-list p1)
                                     (term-list p2))))
          (make-poly (variable p2)
                     (mul-terms (term-list p2)
                                (term-list p2))))
(make-rat (add (make-poly 'x
                          (mul-terms (term-list p1)
                                     (term-list p2)))
               (make-poly 'x
                          (mul-terms (term-list p1)
                                     (term-list p2))))
          (make-poly 'x
                     (mul-terms (term-list p2)
                                (term-list p2))))
;; ここで
(mul-terms (term-list p1)
           (term-list p2))
(mul-terms '((2 1) (0 1)) '((3 1) (0 1)))
'((5 1) (3 2) (0 1))
;; また
(mul-terms (term-list p2)
           (term-list p2))
(mul-terms '((3 1) (0 1)) '((3 1) (0 1)))
'((6 1) (3 2) (0 1))
;; よって
(make-rat (add (make-poly 'x '((5 1) (3 2) (0 1)))
               (make-poly 'x '((5 1) (3 2) (0 1))))
          (make-poly 'x '((6 1) (3 2) (0 1))))
(make-rat (make-poly 'x '((5 2) (3 4) (0 2)))
          (make-poly 'x '((6 1) (3 2) (0 1))))
;; 以下略
;; 約分はされない
